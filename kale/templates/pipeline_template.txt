import kfp.components as comp
from kubernetes import client as k8s_client

def mount_volume_in_container_op(container_op, volume_name=None, host_path=None, mount_path=None):
    """
    Mount a volume into a container op.
    Returns same instance of `container_op`.
    """
    if volume_name is not None:
        return container_op.add_volume(k8s_client.V1Volume(
                                       name=volume_name,
                                       host_path=k8s_client.V1HostPathVolumeSource(path=host_path)))\
                            .add_volume_mount(k8s_client.V1VolumeMount(
                                              mount_path=mount_path,
                                              name=volume_name))
    return container_op


def mount_pvc_in_container_op(container_op, volume_name=None, pvc_name=None, mount_path=None):
    if volume_name is not None:
        return container_op.add_volume(k8s_client.V1Volume(
                                            name=volume_name,
                                            persistent_volume_claim=k8s_client.V1PersistentVolumeClaimVolumeSource(
                                                                        claim_name=pvc_name)))\
                            .add_volume_mount(k8s_client.V1VolumeMount(mount_path=mount_path, name=volume_name))
    return container_op


def mount_volumes_in_container_op(container_op, volume_names, host_paths=None, mount_paths=None, pvc=False, pvc_names=None):
    if pvc:
        for n, pvc_n, mp in zip(volume_names, pvc_names, mount_paths):
            container_op = mount_pvc_in_container_op(container_op, n, pvc_n, mp)
    else:
        for n, hp, mp in zip(volume_names, host_paths, mount_paths):
            container_op = mount_volume_in_container_op(container_op, n, hp, mp)
    return container_op

{# PIPELINE FUNCTION BLOCKS #}
{% for func in block_functions -%}
{{func}}
{% endfor -%}

{# DEFINE PIPELINE TASKS FROM FUNCTIONS #}
{%- for name in block_functions_names -%}
{{ name }}_op = comp.func_to_container_op({{ name }}, base_image='{{ docker_base_image }}')
{% endfor -%}

{# DECLARE PIPELINE #}
import kfp.dsl as dsl
@dsl.pipeline(
   name='{{ pipeline_name }}',
   description='{{ pipeline_description }}'
)
{% if not deploy_pipeline %}
def {{ pipeline_name }}():
{% else %}
def auto_generated_pipeline():
{% endif %}
    {% for name in block_functions_names -%}
{#    {{ name }}_task = mount_volumes_in_container_op(#}
{#        container_op={{ name }}_op({{ block_function_args[ name ]|join(', ') }}),#}
{#        volume_names=['{{ name }}-task-volume'],#}
{#        host_paths=['{{ mount_host_path }}'],#}
{#        mount_paths=['{{ mount_container_path }}'])#}

    {{ name }}_task = mount_volumes_in_container_op(
        container_op=mount_volume_in_container_op(
            container_op={{ name }}_op({{ block_function_args[ name ]|join(', ') }}),
            volume_name='{{ name }}-task-marshal-volume',
            host_path='/tmp/kale_marshal',
            mount_path='/marshal'
        ),
        volume_names=['{{ name }}-task-volume'],
        pvc=True,
        pvc_names=['pipelines-persistence-volume-claim'],
        mount_paths=['{{ mount_container_path }}']
    )
    {% endfor -%}

{# The script will deploy the pipeline if run manually #}
if __name__ == "__main__":
    pipeline_func = {{ pipeline_name }}
    pipeline_filename = pipeline_func.__name__ + '.pipeline.tar.gz'
    import kfp.compiler as compiler
    compiler.Compiler().compile(pipeline_func, pipeline_filename)

    # Get or create an experiment and submit a pipeline run
    import kfp
    client = kfp.Client('http://localhost:8080')
    experiment = client.create_experiment('{{ pipeline_name }}')

    # Submit a pipeline run
    run_name = '{{ pipeline_name }}_run'
    run_result = client.run_pipeline(experiment.id, run_name, pipeline_filename, {})
